# -*- coding: utf-8 -*-

#    Model-View-Controller (MVC)
#
#    This file is part of The Crime Tracer.
#
#    Copyright (C) 2011 Free Software Gaming Geeks <fsgamedev@googlegroups.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''Features related with the MVC pattern.

 This module contains classes for supporting the MVC
 pattern.
'''

try:
    import pygame
    from pygame.locals import *
    from base import Base
    from weakref import WeakKeyDictionary
except (RuntimeError, ImportError) as err:
        import os
        from constants import MOD_FAIL_ERR
        path = os.path.basename(__file__)
        print('{0}: {1}'.format(path, err))
        exit(MOD_FAIL_ERR)

class Event(Base):
    '''this is a superclass for any events that might be generated by an 
    object and sent to the EventManager'''

    def __init__(self):
        self.name = 'Generic Event'

    def __str__(self):
        return self.name

class TickEvent(Event):
    '''A tick event is an event that is generated periodically. Tick events
    are not used for tracking time (using a clock).'''

    def __init__(self):
        self.name = 'CPU Tick Event'

class QuitEvent(Event):
    '''a quit event is generated whenever we must exit the game'''

    def __init__(self):
        self.name = 'Program Quit Event'

class EscapeEvent(Event):
    '''an escape event can be used for skipping a whole section, for
    example an introductory section of the game'''

    def __init__(self):
        self.name = 'Escape Event'

class ReturnEvent(Event):
    '''a return event can be used for skipping a single item, for
    example a slide of a slideshow'''

    def __init__(self):
        self.name = 'Return Event'

class SafeExitEvent(Event):
    '''a safe exit event is generated whenever we must execute safe_exit'''

    def __init__(self):
        self.name = 'Safe Exit Event'

class EventManager(Base):
    '''this class is responsible for coordinating the communication 
    between the Model, the View, and the Controller'''

    def __init__(self):
        self.listeners = WeakKeyDictionary()
        self.eventQueue = []

    def register_listener(self, listener):
        self.listeners[listener] = True

    def unregister_listener(self, listener):
        if listener in self.listeners.keys():
            del self.listeners[listener]

    def post(self, event):
        # uncomment to help debugging
        if not isinstance(event, TickEvent):
            print(event)

        # if the weakref has died, it will be automatically
        # removed, so we do not need to worry about it
        for listener in self.listeners.keys():
            listener.notify(event)

class KeyboardController(Base):
    '''this class is responsible for checking if "interested"
    keyboard keys have been pressed and generate the related
    events'''

    def __init__(self, manager):
        self.event_manager = manager
        self.event_manager.register_listener(self)

    def notify(self, event):
        if isinstance(event, TickEvent):
            for event in pygame.event.get():
                ev = None
                if event.type == QUIT:
                    ev = QuitEvent()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        ev = QuitEvent()
                    elif event.key == pygame.K_ESCAPE:
                        ev = EscapeEvent()
                    elif event.key in (pygame.K_RETURN, pygame.K_SPACE):
                        ev = ReturnEvent()
                if ev:
                    self.event_manager.post(ev)
                
class BusyWaitingController:
    '''this class is responsible for keeping the game executed until
    a quit event is generated'''

    def __init__(self, manager):
        self.event_manager = manager
        self.event_manager.register_listener(self)
        self.keep_going = True

    def run(self):
        while self.keep_going:
            event = TickEvent()
            self.event_manager.post(event)

    def notify(self, event):
        if isinstance(event, QuitEvent):
            self.keep_going = False


class MainGUIView(Base):
    '''a testing class that creates a GUI View'''

    def __init__(self, manager):
        self.event_manager = manager
        self.event_manager.register_listener(self)
        pygame.init()
        self.window = pygame.display.set_mode((428, 428))
        pygame.display.set_caption('Example Game')
        self.background = pygame.Surface(self.window.get_size())
        self.background.fill((0, 0, 0))

    def notify(self, event):
        if isinstance(event, QuitEvent):
            print('ev', event)

def main():
    '''test the MVC pattern'''
    em = EventManager()
    _ = KeyboardController(em)
    gv = MainGUIView(em)

    # keeping running the game running until a quit event occurs
    sl = BusyWaitingController(em)
    sl.run()

if __name__ == '__main__':
    main()
